/*************************************************************
 *  > File Name        : UVa273.cpp
 *  > Author           : Tony
 *  > Created Time     : 2019年02月19日 星期二 12时12分48秒
**************************************************************/

#include <bits/stdc++.h>
using namespace std;

const double EPS = 1e-10;

double add(double a, double b)
{
	if (abs(a + b) < EPS * (abs(a) + abs(b))) return 0;
	return a + b;
}

struct P
{
	double x, y;
	P(){}
	P(double x, double y) : x(x), y(y){}
	P operator + (P p)
	{
		return P(add(x, p.x), add(y, p.y));
	}
	P operator - (P p)
	{
		return P(add(x, -p.x), add(y, -p.y));
	}
	P operator * (double d)
	{
		return P(x * d, y * d);
	}
	double dot(P p)
	{
		return add(x * p.x, y * p.y);
	}
	double det(P p)
	{
		return add(x * p.y, -y * p.x);
	}
};

int n, a, b;
bool g[15][15];
P p[15], q[15];

bool on_seg(P p1, P p2, P q)
{
	return (p1 - q).det(p2 - q) == 0 && (p1 - q).dot(p2 - q) <= 0;
}

P intersection(P p1, P p2, P q1, P q2)
{
	return p1 + (p2 - p1) * ((q2 - q1).det(q1 - p1) / (q2 - q1).det(p2 - p1));
}

void init()
{
	scanf("%d", &n);
	scanf("%d", &n);
	for (int i = 0; i < n; ++i)
		scanf("%d %d %d %d", &p[i].x, &p[i].y, &q[i].x, &q[i].y);
}

void solve()
{
	for (int i = 0; i < n; ++i)
	{
		g[i][i] = true;
		for (int j = 0; j < i; ++j)
		{
			if ((p[i] - q[i]).det(p[j] - q[j]) == 0)
			{
				g[i][j] = g[j][i] = on_seg(p[i], q[i], p[j])
								 || on_seg(p[i], q[i], q[j])
								 || on_seg(p[j], q[j], p[i])
								 || on_seg(p[j], q[j], q[i]);
			}
			else
			{
				P r = intersection(p[i], q[i], p[j], q[j]);
				g[i][j] = g[j][i] = on_seg(p[i], q[i], r) && on_seg(p[j], q[j], r);
			}
		}
	}
	for (int j = 0; j < n; ++j)
		for (int k = 0; k < n; ++k)
			for (int l = 0; l < n; ++l)
				g[k][l] |= g[k][j] && g[j][l];
}

int main()
{
	init();
	solve();
	scanf("%d %d", &a, &b);
	do
	{
		if (g[a - 1][b - 1])
			printf("CONNECTED\n");
		else
			printf("NOT CONNECTED\n");
		scanf("%d %d", &a, &b);
	} while(a != 0 && b != 0);
	return 0;
}
